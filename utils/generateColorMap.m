function [ outputMap ] = generateColorMap(map, type)
%GENERATECOLORMAP
%   This code generate a color map based in the results obtained from the
%   HELICoiD classification result. It assigns colors depending on a class
%   list and the label in each pixel of the classification map.
%
%   INPUTS:
%   - map:  2D Matrix with the labeled classification results.
%   - type: 'fourClass' to generate 4 class map. 'density' to generate TMD
%
%   OUTPUTS:
%   - outputMap: 4 class map or TMD. 
%
%   Authors:  Raquel Leon, Himar Fabelo, Samuel Ortega
%
%   Email address:
%   slmartin@iuma.ulpgc.es, hfabelo@iuma.ulpgc.es, sortega@iuma.ulpgc.es
%   Nov 2023.


switch type
    case 'fourClass'
        outputMap = generateClassificationMap(map);

    case 'density'
        outputMap = generateDensityMaps(map);
end

end


function [ colorMap ] = generateClassificationMap(input)
% GENERATECLASSIFICATIONMAP Generates a classification colormap.
%
% [colorMap] = generateClassificationMap(input)
%
%   This function takes an input matrix (input) and generates a colormap for
%   visualization of a classification result. Each unique class label in the
%   input matrix is assigned a unique color in the output colormap.
%
%   INPUTS:
%   - input: An input matrix representing a classification map. Each element
%     in the matrix should correspond to a class label.
%
%   OUTPUTS:
%   - colorMap: A colormap with unique colors assigned to each class label.
%
% Authors: Samuel Ortega, Himar Fabelo, Raquel Leon
%
% email address:
% sortega@iuma.ulpgc.es, hfabelo@iuma.ulpgc.es, slmartin@iuma.ulpgc.es
% Nov 2023.

sizeHC = size(input);
colorMap = zeros(sizeHC(1), sizeHC(2), 3, 'uint8');
classList = {
    '1','Normal','NonDefined','NonDefined',[0 255 0];
    '2','Tumour','Primary-GIV','PureGBM',[255 0 0];
    '3','Other','Blood','Generic',[0 0 255];
    '4','Background','BG-Generic','BG-Generic',[0 0 0];
    };

for i = 1 : sizeHC(1)
    for j = 1 : sizeHC(2)
        currentClassIndex = strcmp(num2str( input( i, j ) ), classList( :, 1 ) );
        currentClassColor = classList( currentClassIndex, 5 );
        colorMap( i, j, : ) = currentClassColor{ 1 };
    end
end

end


function [tmdMap] = generateDensityMaps(input)
% GENERATEDENSITYMAPS  Generates density maps from input data.
%
%   [output] = generateDensityMaps(input)
%
%   This function takes an input data matrix (input) and generates density maps
%   based on the input data. The density maps can be useful for visualizing the
%   distribution of data points in two-dimensional space, and they can provide
%   insights into the density of data within the region.
%
%   INPUTS:
%   - input: a struct with 2D matrix.
%       - mapProb: probability generated by  majority voting
%       - map: highest class generated by majority voting
%
%   OUTPUTS:
%   - output: A density map representing the density of data points in the
%     input data.
% Authors: Samuel Ortega, Himar Fabelo, Raquel Leon
%
% email address:
% sortega@iuma.ulpgc.es, hfabelo@iuma.ulpgc.es, slmartin@iuma.ulpgc.es
% Nov 2023.

[ sampleNumber, columnNumber, ~] = size( input.mapProb );

tmdMap = zeros( sampleNumber, columnNumber, 3 );

for i = 1 : 1 : sampleNumber
    for j = 1 : 1 : columnNumber
        for m = 1 : 1 : 3
            % Majority Voting Maps
            class =  input.classMap( i, j, m );
            factor = input.mapProb( i, j, m );

            if (class == 1)
                tmdMap(i,j,2) = factor;   %Probability Green
            elseif (class == 2)
                tmdMap(i,j,1) = factor;   %Probability Red
            elseif (class == 3 )
                tmdMap(i,j,3) = factor;   %Probability Blue
            elseif (class >= 320) && (class <= 399)
                if m == 1
                    tmdMap(i,j,:) = [0 0 0];
                end
            elseif (class == 4)
                if m == 1
                    tmdMap(i,j,:) = [0 0 0];
                end
            end
        end
    end
end

end

